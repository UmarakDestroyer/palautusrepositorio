import { useState, useEffect } from 'react'
import axios from 'axios'
import './index.css'
import personService from './services/persons'

const Notification = ({message, error}) => {
	if (message === null) {
		return null
	}

	const goodStyle = {
		color: 'white',
		fontStyle: 'italic',
		fontSize: 16,
		radius: 10,
		backgroundColor: 'green', 
		padding: 20}

	const badStyle = {
		color: 'white',
		fontStyle: 'italic',
		fontSize: 16,
		radius: 10,
		backgroundColor: 'red', 
		padding: 20}
	const	styl = error ? badStyle : goodStyle 

	return ( 
		<div style={styl}>
		{message}
		</div>
	)

}
const Filter = ({newSearch, searchFilter}) =>{
	return(
  		<div>filter shown with: <input value={newSearch} onChange={searchFilter} /></div>
	) 

}
const PersonForm = ({addPerson, newPerson, handleNameChange, handleNumberChange}) =>{
	return ( 

      <form onSubmit={addPerson}>
        <div>
          name: <input value={newPerson.name} onChange={handleNameChange} />
        </div>
  	<div>number: <input value={newPerson.number} onChange={handleNumberChange} /></div>
        <div>
          <button type="submit">add</button>
        </div>
      </form>
	)
}
const Persons = ({newSearch, persons, deletePerson}) =>{
	return (
	  <ul> {persons.filter((person)=> person.name.toLowerCase().includes(newSearch.toLowerCase())).map((person)=><li key={person.id}>{person.name} {person.number}
		  <button onClick={(event)=>deletePerson(event,person.id)}>delete</button></li>)}
	  </ul>
	)
}

const App = () => {
  const [persons, setPersons] = useState([
  ]) 
  const [newPerson, setNewPerson] = useState({name: "", number: "", id: ""})
  const [newSearch, setNewSearch] = useState("")
  const [errorMessage, setErrorMessage] = useState({text: "", error: false})
  useEffect(() => {
	  personService.getAll()
	.then(person => {
		  setPersons(person);
	          console.log(persons);
	  })
  }, [])
  const addPerson = (event) => {
	  event.preventDefault()
	  if (persons.map(({name})=>name).includes(newPerson.name)){
		if (window.confirm(`${newPerson.name} is already added to the phonebook, repalce the old number \n with a new one?`))
		  {
			const newObject = {...persons.find(person=>person.name==newPerson.name), number:newPerson.number}
			setPersons(persons.map(person=> person.name != newPerson.name ? person : newObject))
			personService.update(persons.find(person=>newPerson.name ==person.name).id, newObject).then(res=>
				{
					
	            			setErrorMessage({text: `Changed ${newPerson.name}'s number`, error: false});
	            			setTimeout(()=>setErrorMessage({...errorMessage, text: ""}), 5000)
				}).catch( (err) => {

	            			setErrorMessage({text: err.res.data, error: true} );
	            			setTimeout(()=>setErrorMessage({...errorMessage, text: ""}), 5000)
				})
		  }

		return 
	  }
	  const newPersonObject = {
		  name: newPerson.name, 
		  number: newPerson.number
	  }
	  
	  personService.create(newPersonObject)
	  .then(res => 
		  { console.log(res);
	            setErrorMessage({text: `Added ${newPerson.name}`, error: false});
	            setTimeout(()=>setErrorMessage({...errorMessage, text: ""}), 5000)}).catch(
			    err => {
			seterrorMessage({text: err.response.data, error: true});
			setTimeout(() => setErrorMessage({...errorMessage, text: ""}), 5000)	
			    })
	  setPersons(persons.concat(newPersonObject))
	  event.target.value = ""
	  setNewPerson({name: "", number: ""})
  }

  const handleNameChange = (event) =>{
	  event.preventDefault()
	  setNewPerson({...newPerson, name: event.target.value})
	  
  }

  const handleNumberChange = (event) =>{
	  event.preventDefault()
	  setNewPerson({...newPerson, number: event.target.value})
	  
  }

  const deletePerson = (event, id) =>{
	  event.preventDefault()
	  const name = persons.find(person=>person.id==id).name
	  const text = `Delete ${name}`;
	  if (window.confirm(text))
	  {
	  	setPersons(persons.filter(person=>person.id!=id))
	  	personService.forget(id).then(res=>{
			console.log(res);
				
	            	setErrorMessage({text: `Deleted ${name}`, error: false} );
	            	setTimeout(()=>setErrorMessage({...errorMessage, text: ""}), 5000)
		}).catch(()=>{	
	            	setErrorMessage({text: `${name} has already been deleted`, error: true} );
	            	setTimeout(()=>setErrorMessage({...errorMessage, text: ""}), 5000)
		}
		)
	  }

  }

  const searchFilter = (event) =>{
	  event.preventDefault()
	  setNewSearch(event.target.value)
	  
  }


  return (
    <div>

      <h2>Phonebook</h2>
	  {errorMessage.text != "" ? <Notification message={errorMessage.text} error={errorMessage.error} />: null}

      <Filter newSearch={newSearch} searchFilter={searchFilter} />

      <h3>Add a new</h3>

      <PersonForm
	addPerson={addPerson} newPerson={newPerson} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange}    
      />

	  
      <h2>Numbers</h2>
	  

      <Persons persons={persons} newSearch={newSearch} deletePerson={deletePerson} /> 
    </div>
  )

}

export default App
